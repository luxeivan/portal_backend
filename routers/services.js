const express = require("express");
const router = express.Router();
const {
  getServicesByKey,
  getServiceItemByKey,
} = require("../services/onec/services");
const logger = require("../logger");

/**
 * @swagger
 * /api/services:
 *   get:
 *     summary: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å–ª—É–≥
 *     tags: ["üåê Services"]
 *     responses:
 *       200:
 *         description: –£—Å–ª—É–≥–∏ –Ω–∞–π–¥–µ–Ω—ã
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items: { type: object }
 *       500: { description: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Å–ª—É–≥ }
 */

router.get("/", async (req, res) => {
  // logger.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥");

  try {
    const services = await getServicesByKey();
    // logger.info("–£—Å–ª—É–≥–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã");
    console.log("services", services);
    if (services) {
      res.json(services);
    } else {
      throw new Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –ë–î");
    }
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Å–ª—É–≥: ${error.message}`);
    res.status(500).json({
      status: "error",
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Å–ª—É–≥",
      error: error.message,
    });
  }
});

/**
 * @swagger
 * /api/services/{key}:
 *   get:
 *     summary: –£—Å–ª—É–≥–∏ –ø–æ –∫–ª—é—á—É
 *     tags: ["üåê Services"]
 *     parameters:
 *       - in: path
 *         name: key
 *         required: true
 *         schema: { type: string }
 *         description: GUID –∏–ª–∏ —Å–∏–º–≤–æ–ª—å–Ω—ã–π –∫–ª—é—á —É—Å–ª—É–≥–∏
 *     responses:
 *       200: { description: –£—Å–ª—É–≥–∞ –Ω–∞–π–¥–µ–Ω–∞ }
 *       500: { description: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏ }
 */

router.get("/:key", async (req, res) => {
  // logger.info(`–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ —Å –∫–ª—é—á–æ–º: ${req.params.key}`);

  try {
    const key = req.params.key;
    const services = await getServicesByKey(key);
    // logger.info(`–£—Å–ª—É–≥–∞ —Å –∫–ª—é—á–æ–º ${key} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞`);
    if (services) {
      res.json(services);
    } else {
      throw new Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –ë–î");
    }
  } catch (error) {
    res.status(500).json({
      status: "error",
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏",
      error: error.message,
    });
    logger.error(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏ —Å –∫–ª—é—á–æ–º ${req.params.key}: ${error.message}`
    );
  }
});

/**
 * @swagger
 * /api/services/item/{key}:
 *   get:
 *     summary: –î–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —É—Å–ª—É–≥–∏
 *     tags: ["üåê Services"]
 *     parameters:
 *       - in: path
 *         name: key
 *         required: true
 *         schema: { type: string }
 *       - in: query
 *         name: withFields
 *         schema:
 *           type: boolean
 *         description: –í–µ—Ä–Ω—É—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—è (true / false)
 *     responses:
 *       200: { description: –≠–ª–µ–º–µ–Ω—Ç —É—Å–ª—É–≥–∏ –Ω–∞–π–¥–µ–Ω }
 *       500: { description: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ —É—Å–ª—É–≥–∏ }
 */

router.get("/item/:key", async (req, res) => {
  // logger.info(
  //   `–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —É—Å–ª—É–≥–∏ —Å –∫–ª—é—á–æ–º: ${req.params.key}`
  // );

  try {
    const key = req.params.key;
    let withFields = req.query.withFields;
    if (withFields === "false") withFields = false;
    if (withFields === "true") withFields = true;

    // console.log('withFields: ', withFields)
    const services = await getServiceItemByKey(key, withFields);
    // logger.info(`–≠–ª–µ–º–µ–Ω—Ç —É—Å–ª—É–≥–∏ —Å –∫–ª—é—á–æ–º ${key} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω`);
    // console.log('services: ', services)
    res.json(services);
  } catch (error) {
    logger.error(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ —É—Å–ª—É–≥–∏ —Å –∫–ª—é—á–æ–º ${req.params.key}: ${error.message}`
    );
    res.status(500).json({
      status: "error",
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ —É—Å–ª—É–≥–∏",
      error: error.message,
    });
  }
});

module.exports = router;
