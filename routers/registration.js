const express = require("express");
const router = express.Router();
const jwt = require("jsonwebtoken");
const { check, validationResult } = require("express-validator");
const sendCodeToMail = require("../services/sendCodeToMail");
const sendCodeToPhone = require("../services/sendCodeToPhone");
const {
  createNewUser,
  updateUser,
  checkUserByEmail,
} = require("../services/onec/users");
const logger = require("../logger");

const privateKey = process.env.JWT_SECRET;

const attempts = 3; //–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
const timeAttempts = 60000; //–í—Ä–µ–º—è –ø–æ–ø—ã—Ç–æ–∫

/**
 * @swagger
 * /api/registration/phone:
 *   post:
 *     summary: –ó–∞–ø—Ä–æ—Å SMS-–∫–æ–¥–∞ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω
 *     tags: ["üåê Registration"]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required: [phone]
 *             properties:
 *               phone:
 *                 type: string
 *                 example: "+79517019281"
 *     responses:
 *       200:
 *         description: –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 status:     { type: string, example: ok }
 *                 phoneCount: { type: integer, example: 3 }
 *       400: { description: –ù–µ—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ }
 *       403: { description: –¢–µ–ª–µ—Ñ–æ–Ω —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω }
 *       429: { description: –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ }
 *       500: { description: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS }
 */

router.post("/phone", async (req, res) => {
  try {
    if (!req.body.phone) {
      logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'phone' –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞");
      return res.status(400).json({ status: "error", message: "–Ω–µ—Ç –Ω—É–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏" });
    }
    if (req.session.phoneCheck) {
      logger.error("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω");
      return res.status(400).json({ status: "error", message: "—Ç–µ–ª–µ—Ñ–æ–Ω —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω" });
    }
    if (!req.session.emailCheck) {
      logger.warn("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email");
      return res.status(400).json({
        status: "error",
        message: "–≤–Ω–∞—á–∞–ª–µ –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email",
      });
    }

    if (req.session.phoneBlock) {
      logger.error("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ");
      return res.json({
        status: "unavailable",
        message: "–Ω–µ–ª—å–∑—è —á–∞—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
      });
    }
    req.session.phone = req.body.phone;
    req.session.phoneCheck = false;
    req.session.phoneCount = attempts;
    console.log("—Å–º—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    const code = await sendCodeToPhone(req.body.phone);
    logger.info(
      `–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${req.body.phone}, –∫–æ–¥: ${code}`
    );

    req.session.phoneBlock = true;
    setTimeout(() => {
      req.session.phoneBlock = false;
    }, timeAttempts);

    req.session.phoneCode = code;

    return res.json({ status: "ok", phoneCount: req.session.phoneCount });
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${error.message}`);
    return res
      .status(500)
      .json({ status: "error", message: "–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞" });
  }
});

/**
 * @swagger
 * /api/registration/phonecode:
 *   post:
 *     summary: –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å SMS-–∫–æ–¥
 *     tags: ["üåê Registration"]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required: [phoneCode]
 *             properties:
 *               phoneCode:
 *                 type: string
 *                 example: "1234"
 *     responses:
 *       200: { description: –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω }
 *       400: { description: –ö–æ–¥ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω }
 *       403: { description: –¢–µ–ª–µ—Ñ–æ–Ω —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω }
 *       410: { description: –ü–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã }
 *       418:
 *         description: –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 status:     { type: string, example: error }
 *                 message:    { type: string, example: "–Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥" }
 *                 phoneCount: { type: integer, example: 2 }
 *       500: { description: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ }
 */

router.post("/phonecode", async (req, res) => {
  try {
    if (!req.body.phoneCode) {
      logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'phoneCode' –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞");
      return res.status(400).json({ status: "error", message: "–Ω–µ—Ç –Ω—É–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏" });
    }
    if (req.session.phoneCheck) {
      // logger.info("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω");
      return res.status(400).json({ status: "error", message: "—Ç–µ–ª–µ—Ñ–æ–Ω —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω" });
    }
    if (req.session.phoneCount <= 0) {
      logger.warn("–ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞");
      req.session.destroy();
      return res.status(400).json({
        status: "error",
        message: "–∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
      });
    }
    // logger.info(
    //   `–ü–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥: ${req.body.phoneCode}, –æ–∂–∏–¥–∞–µ–º—ã–π –∫–æ–¥: ${req.session.phoneCode}`
    // );
    if (req.body.phoneCode == req.session.phoneCode) {
      req.session.phoneCheck = true;
      req.session.phoneCount = 0;
      // logger.info("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω");
      return res.json({ status: "ok", message: "—Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω" });
    } else {
      req.session.phoneCount = req.session.phoneCount - 1;
      logger.warn(
        `–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥, –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: ${req.session.phoneCount}`
      );
      return res.json({
        status: "error",
        message: "–Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥",
        phoneCount: req.session.phoneCount,
      });
    }
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${error.message}`);
    return res.status(500).json({
      status: "error",
      message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
    });
  }
});

/**
 * @swagger
 * /api/registration/email:
 *   post:
 *     summary: –ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –Ω–∞ e-mail
 *     tags: ["üåê Registration"]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required: [email]
 *             properties:
 *               email:
 *                 type: string
 *                 format: email
 *                 example: "user@example.com"
 *     responses:
 *       200:
 *         description: –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 status:     { type: string, example: ok }
 *                 emailcount: { type: integer, example: 3 }
 *       400: { description: Email –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω }
 *       403: { description: Email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω }
 *       409: { description: –¢–µ–ª–µ—Ñ–æ–Ω –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω }
 *       429: { description: –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ }
 *       500: { description: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ }
 */

router.post("/email", async (req, res) => {
  const originDomain = req.get('origin')
  console.log("originDomain", originDomain)

  const host = req.get('host')
  console.log("host", host)

  const userIP = req.socket.remoteAddress;
  console.log("userIP", userIP)
  try {
    logger.info(
      `–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email: ${JSON.stringify(req.body)}`
    );
    if (!req.body.email) {
      logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'email' –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞");
      return res.status(400).json({ status: "error", message: "–Ω–µ—Ç –Ω—É–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏" });
    }
    if (req.session.emailCheck) {
      // logger.info("Email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω");
      return res.status(400).json({ status: "error", message: "email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω" });
    }

    if (req.session.emailBlock) {
      logger.warn("–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email");
      return res.status(400).json({
        status: "unavailable",
        message: "–Ω–µ–ª—å–∑—è —á–∞—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email",
      });
    }

    req.session.email = req.body.email.toLowerCase();
    req.session.emailCheck = false;
    req.session.emailCount = attempts;

    const code = await sendCodeToMail(req.body.email);
    // logger.info(`–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email: ${req.body.email}`);

    req.session.emailBlock = true;
    setTimeout(() => {
      req.session.emailBlock = false;
    }, timeAttempts);

    req.session.emailCode = code;

    return res.json({ status: "ok", emailcount: req.session.emailCount });
  } catch (error) {
    logger.error(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ email: ${error.message}`
    );
    return res
      .status(500)
      .json({ status: "error", message: "–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞" });
  }
});

/**
 * @swagger
 * /api/registration/emailcode:
 *   post:
 *     summary: –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å e-mail –∫–æ–¥
 *     tags: ["üåê Registration"]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required: [emailCode]
 *             properties:
 *               emailCode:
 *                 type: string
 *                 example: "ABCD12"
 *     responses:
 *       200: { description: Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω }
 *       400: { description: –ö–æ–¥ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω }
 *       403: { description: Email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω }
 *       410: { description: –ü–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã }
 *       418: { description: –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ }
 *       500: { description: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ }
 */

router.post("/emailcode", async (req, res) => {
  try {
    logger.info(
      `–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email-–∫–æ–¥–∞: ${JSON.stringify(req.body)}`
    );
    if (!req.body.emailCode) {
      logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'emailCode' –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞");
      return res.json({ status: "error", message: "–Ω–µ—Ç –Ω—É–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏" });
    }
    if (req.session.emailCheck) {
      // logger.info("Email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω");
      return res.json({ status: "error", message: "email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω" });
    }
    if (req.session.emailCount == 0) {
      logger.warn("–ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email");
      req.session.destroy();
      return res.json({
        status: "error",
        message: "–∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email",
      });
    }
    if (req.body.emailCode == req.session.emailCode) {
      req.session.emailCheck = true;
      req.session.emailCount = 0;
      // logger.info("Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω");
      return res.json({ status: "ok", message: "email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω" });
    } else {
      req.session.emailCount = req.session.emailCount - 1;
      logger.warn("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email");
      return res.json({
        status: "error",
        message: "–Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥",
        emailCount: req.session.emailCount,
      });
    }
  } catch (error) {
    logger.error(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email: ${error.message}`
    );
    return res.status(500).json({
      status: "error",
      message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
    });
  }
});

/**
 * @swagger
 * /api/registration/newuser:
 *   post:
 *     summary: –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 *     tags: ["üåê Registration"]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required: [password]
 *             properties:
 *               password:
 *                 type: string
 *                 minLength: 10
 *                 example: StrongPassword123
 *     responses:
 *       200:
 *         description: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 status: { type: string, example: ok }
 *                 jwt:    { type: string, example: "eyJhbGciOi..." }
 *       400: { description: –ü–∞—Ä–æ–ª—å –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω }
 *       403: { description: –¢–µ–ª–µ—Ñ–æ–Ω / e-mail –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã }
 *       500: { description: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è / –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è }
 */

router.post("/newuser", async (req, res) => {
  try {
    logger.info(
      `–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${JSON.stringify(
        req.body
      )}`
    );

    if (!req.body.password) {
      logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'password' –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞");
      return res.json({ status: "error", message: "–Ω–µ—Ç –Ω—É–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏" });
    }

    if (!req.session.emailCheck || !req.session.phoneCheck) {
      logger.warn("–ù–µ –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞");
      return res.json({
        status: "error",
        message: "–Ω–µ –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞",
      });
    }

    const checkUser = await checkUserByEmail(req.session.email);
    if (checkUser) {
      try {
        const user = await updateUser(
          checkUser,
          req.session.phone,
          req.body.password
        );
        logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –∏ –æ–±–Ω–æ–≤–ª–µ–Ω: ${user.Email}`);
        req.session.destroy();
        const userjwt = jwt.sign(
          {
            id: user.Ref_Key,
            // email: user.Email, 
            // phone: user.Phone 
          },
          privateKey,
          { expiresIn: `${process.env.JWT_LIVE_HOURS}h` }
        );
        return res.json({ status: "ok", jwt: userjwt });
      } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`);
        return res.status(500).json({
          status: "error",
          message: "–æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
          error: error.message,
        });
      }
    } else {
      try {
        const newuser = await createNewUser(
          req.session.email,
          req.session.phone,
          req.body.password
        );
        logger.info(`–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${newuser.Email}`);
        req.session.destroy();
        const userjwt = jwt.sign(
          {
            id: newuser.Ref_Key,
            // email: newuser.Email, 
            // phone: newuser.Phone 
          },
          privateKey,
          { expiresIn: `${process.env.JWT_LIVE_HOURS}h` }
        );
        return res.json({ status: "ok", jwt: userjwt });
      } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`);
        return res.status(500).json({
          status: "error",
          message: "–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
          error: error.message,
        });
      }
    }
  } catch (error) {
    logger.error(
      `–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`
    );
    return res.status(500).json({
      status: "error",
      message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
    });
  }
});

/**
 * @swagger
 * /api/registration/clearinfo:
 *   post:
 *     summary: –°–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
 *     tags: ["üåê Registration"]
 *     responses:
 *       200:
 *         description: –°–µ—Å—Å–∏—è –æ—á–∏—â–µ–Ω–∞
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 status:  { type: string, example: ok }
 *                 message: { type: string, example: "–æ—Ç–º–µ–Ω–µ–Ω—ã –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è" }
 *       500: { description: –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ }
 */

router.post("/clearinfo", async (req, res) => {
  try {
    // logger.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—á–∏—Å—Ç–∫—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏");

    req.session.destroy((err) => {
      if (err) {
        logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: ${err.message}`);
        return res.status(500).json({
          status: "error",
          message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏",
        });
      }

      // logger.info("–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
      res.json({ status: "ok", message: "–æ—Ç–º–µ–Ω–µ–Ω—ã –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è" });
    });
  } catch (error) {
    logger.error(`–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: ${error.message}`);
    return res.status(500).json({
      status: "error",
      message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
    });
  }
});

module.exports = router;
