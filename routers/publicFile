const express = require("express");
const axios = require("axios");
require("dotenv").config();

const router = express.Router();

// const SERVER_1C = process.env.SERVER_1C;
const server1c_auth = process.env.SERVER_1C_AUTHORIZATION;
const server1cHttpService = process.env.SERVER_1C_HTTP_SERVICE;
// –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ 1–°
const headers = {
    Authorization: server1c_auth,
};
/**
 * @swagger
 * /api/contacts:
 *   get:
 *     summary: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
 *     description: |
 *       –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64
 *     tags: ["üåê Contact"]
 *     responses:
 *       200:
 *         description: –ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–∞–π–¥–µ–Ω—ã
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 type: object
 *                 properties:
 *                   object:
 *                     type: string
 *                     description: GUID –∑–∞–ø–∏—Å–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
 *                     example: "e93f2105-bffe-11ee-907a-00505601574a"
 *                   description:
 *                     type: string
 *                     example: "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ —ç–ª–µ–∫—Ç—Ä–æ—Å–µ—Ç–∏"
 *                   photos:
 *                     type: array
 *                     items:
 *                       type: object
 *                       properties:
 *                         –ü—É—Ç—å–ö–§–∞–π–ª—É:
 *                           type: string
 *                           example: "images/contacts/123.jpg"
 *                         –ü–æ–ª–Ω—ã–π–ü—É—Ç—åWindows:
 *                           type: string
 *                           example: "\\\\srv\\share\\images\\contacts\\123.jpg"
 *       500:
 *         description: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ 1–°
 */

router.get("/:key", async (req, res) => {
    const key = req.params.key;
    try {
        const response = await axios.get(`${server1cHttpService}/public/files/${key}`, { headers })
        if (response.data) {
           return res.json({ ...response.data })
        }
        return res.status(500).json({ status: "error", message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞" })
    } catch (error) {
        console.log(error);        
        res.status(500).json({ status: "error", message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞" })
    }
})
module.exports = router;
