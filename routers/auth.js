const express = require("express");
const router = express.Router();
const { check, validationResult, checkSchema } = require("express-validator");
const sendCodeToPhone = require("../services/sendCodeToPhone");
const jwt = require("jsonwebtoken");
const { getUserByEmail, getUserById } = require("../services/onec/users");
const logger = require("../logger");
const bcrypt = require("bcrypt");

const privateKey = process.env.JWT_SECRET;
const devLocal = process.env.DEV_LOCAL;

/**
 * @swagger
 * /api/auth/login:
 *   post:
 *     summary: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (—à–∞–≥ 1 ‚Äî –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å)
 *     description: |
 *       –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è SMS-–∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ –Ω–æ–º–µ—Ä,
 *       –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–π –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
 *     tags: ["üåê Auth"]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required: [email, password]
 *             properties:
 *               email:
 *                 type: string
 *                 format: email
 *                 example: user@example.com
 *               password:
 *                 type: string
 *                 minLength: 10
 *                 example: StrongPassword123
 *     responses:
 *       200:
 *         description: SMS-–∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 status:  { type: string, example: ok }
 *                 message: { type: string, example: –û–∂–∏–¥–∞–µ—Ç—Å—è –ø–∏–Ω –∫–æ–¥ }
 *       400:
 *         description: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ / –ø–æ–ª—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
 *       418:
 *         description: –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 *       500:
 *         description: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 */

router.post(
  "/login",
  async (req, res, next) => {
    try {
      await checkSchema({
        email: { isEmail: true, errorMessage: "–ü–æ–ª–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Email" },
        password: {
          isLength: { options: { min: 10 } },
          errorMessage: "–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 10 —Å–∏–º–≤–æ–ª–æ–≤",
        },
      }).run(req);
      const result = validationResult(req);
      if (!result.isEmpty()) {
        logger.error(
          "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–µ–π: %s",
          JSON.stringify(result.errors)
        );
        return res.status(400).json({ status: "error", errors: result.errors });
      }
      next();
    } catch (error) {
      logger.error(
        "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª–µ–π: %s",
        error.message
      );
      res
        .status(500)
        .json({ status: "error", message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },
  async function (req, res) {
    try {
      if (!req.body.email || !req.body.password) {
        return res
          .status(400)
          .json({ status: "error", message: "–Ω–µ—Ç –Ω—É–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏" });
      }

      const founduser = await getUserByEmail(req.body.email.toLowerCase());
      // console.log("founduser", founduser);

      if (founduser && (founduser.block || founduser.blocked)) {
        return res.status(423).json({ status: "block", message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" })
      }

      if (
        founduser &&
        (await bcrypt.compare(req.body.password, founduser.password))
      ) {
        req.session.founduser = founduser;
        if (devLocal != 1) {
          try {
            req.session.pincode = await sendCodeToPhone(founduser.phone);
            return res.json({ status: "ok", message: "–û–∂–∏–¥–∞–µ—Ç—Å—è –ø–∏–Ω –∫–æ–¥" });
          } catch (error) {
            logger.error(
              "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω: %s",
              error.message
            );
            return res
              .status(500)
              .json({ status: "error", message: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–º—Å" });
          }
        } else {
          console.log("founduser", req.session.founduser);

          req.session.pincode = 1111
          return res.json({ status: "ok", message: "–û–∂–∏–¥–∞–µ—Ç—Å—è –ø–∏–Ω –∫–æ–¥" });
        }
      } else {
        return res
          .status(403)
          .json({ status: "error", message: "–õ–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–µ" });
      }
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s", error.message);
      res
        .status(500)
        .json({ status: "error", message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  }
);

/**
 * @swagger
 * /api/auth/logincode:
 *   post:
 *     summary: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (—à–∞–≥ 2 ‚Äî SMS-–∫–æ–¥)
 *     description: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JWT –ø—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º PIN-–∫–æ–¥–µ.
 *     tags: ["üåê Auth"]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required: [pincode]
 *             properties:
 *               pincode:
 *                 type: string
 *                 minLength: 4
 *                 maxLength: 11
 *                 example: "1234"
 *     responses:
 *       200:
 *         description: –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 status: { type: string, example: ok }
 *                 jwt:    { type: string, example: eyJh‚Ä¶ }
 *                 userid: { type: string, example: 8a6c‚Ä¶ }
 *                 email:  { type: string, example: user@example.com }
 *                 phone:  { type: string, example: "+7 916 123-45-67" }
 *       400:
 *         description: –ü–∏–Ω-–∫–æ–¥ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
 *       418:
 *         description: –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∏–Ω-–∫–æ–¥
 *       500:
 *         description: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 */

router.post(
  "/logincode",
  async (req, res, next) => {
    try {
      await checkSchema({
        pincode: {
          isLength: { options: { min: 4, max: 11 } },
          errorMessage: "–ö–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 4 —Å–∏–º–≤–æ–ª–æ–≤",
        },
      }).run(req);
      const result = validationResult(req);
      if (!result.isEmpty()) {
        logger.error("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: %s", JSON.stringify(result.errors));
        return res.status(400).json({ status: "error", errors: result.errors });
      }
      next();
    } catch (error) {
      logger.error(
        "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∏–Ω–∫–æ–¥–∞: %s",
        error.message
      );
      res
        .status(500)
        .json({ status: "error", message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },
  async (req, res) => {
    try {
      if (!req.body.pincode) {
        logger.error("–û—à–∏–±–∫–∞: –Ω–µ—Ç –Ω—É–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏");
        return res
          .status(400)
          .json({ status: "error", message: "–Ω–µ—Ç –Ω—É–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏" });
      }
      console.log("founduser1",req.session.founduser);
      
      if (!req.session.founduser) {
        logger.error("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å");
        return res
          .status(400)
          .json({ status: "error", message: "–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" });
      }
      if (req.session.pincode == req.body.pincode) {
        const userjwt = jwt.sign(
          {
            id: req.session.founduser.Ref_Key,
            // email: req.session.founduser.email,
            // phone: req.session.founduser.phone,
          },
          privateKey,
          { expiresIn: `${process.env.JWT_LIVE_HOURS}h` }
        );
        return res.json({
          status: "ok",
          jwt: userjwt,
          userid: req.session.founduser.Ref_key,
          email: req.session.founduser.email,
          phone: req.session.founduser.phone,
        });
      } else {
        logger.error("–û—à–∏–±–∫–∞: –ù–µ –≤–µ—Ä–Ω—ã–π –ø–∏–Ω –∫–æ–¥");
        return res
          .status(418)
          .json({ status: "error", message: "–ù–µ –≤–µ—Ä–Ω—ã–π –ø–∏–Ω –∫–æ–¥" });
      }
    } catch (error) {
      logger.error(
        "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∏–Ω–∫–æ–¥–∞: %s",
        error.message
      );
      res
        .status(500)
        .json({ status: "error", message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  }
);

/**
 * @swagger
 * /api/auth/checkjwt:
 *   post:
 *     summary: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å JWT
 *     tags: ["üåê Auth"]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required: [jwt]
 *             properties:
 *               jwt:
 *                 type: string
 *                 example: eyJhbgOiJ9‚Ä¶
 *     responses:
 *       200:
 *         description: –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 id:    { type: string, example: 8a6c‚Ä¶ }
 *                 email: { type: string, example: user@example.com }
 *                 phone: { type: string, example: "+7 916 123-45-67" }
 *       400:
 *         description: JWT –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
 *       401:
 *         description: –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω / –ø—Ä–æ—Å—Ä–æ—á–µ–Ω
 *       500:
 *         description: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 */

router.post("/checkjwt", async function (req, res) {
  try {
    if (!req.body.jwt) {
      logger.error("–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω jwt –≤ —Ç–µ–ª–µ");
      return res.status(400).json("–Ω–µ —É–∫–∞–∑–∞–Ω jwt –≤ —Ç–µ–ª–µ");
    }

    const valid = await jwt.verify(req.body.jwt, privateKey);
    // logger.info("JWT —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω", { valid });
    const user = await getUserById(valid.id);
    if (!user) throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
    res.json({ id: user.Ref_key, email: user.email, phone: user.phone });
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT", { error: error.message });
    res.status(401).json({ status: "unauthorized" });
  }
});

module.exports = router;
