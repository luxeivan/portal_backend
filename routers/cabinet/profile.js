const express = require("express");
const router = express.Router();
const { getUserById, updateUser } = require("../../services/onec/users");
const logger = require("../../logger");
const { getAllUsers } = require("../../services/db/userService");

/**
 * @swagger
 * /api/cabinet/profile:
 *   get:
 *     summary: –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
 *     description: >
 *       üîí –¢—Ä–µ–±—É–µ—Ç—Å—è JWT –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
 *       `Authorization: Bearer <token>`
 *     tags: ["üîí Profile"]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: –ü—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 firstname:
 *                   type: string
 *                   example: –ò–≤–∞–Ω
 *                 lastname:
 *                   type: string
 *                   example: –ò–≤–∞–Ω–æ–≤
 *                 email:
 *                   type: string
 *                   example: user@example.com
 *                 phone:
 *                   type: string
 *                   example: "+7 916 123-45-67"
 *                 date–°reate:
 *                   type: string
 *                   format: date-time
 *                   example: "2024-12-01T10:15:30Z"
 *       401:
 *         description: JWT –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω
 *       500:
 *         description: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 */

router.get("/", async (req, res) => {
  try {
    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ userId –ø–æ–ª—É—á–µ–Ω –∏–∑ —Ç–æ–∫–µ–Ω–∞
    // const userId = req.session.founduser ? req.session.founduser.Ref_Key : null;
    const userId = req.userId;
    if (!userId) {
      logger.error("User ID is not defined");
      return res.status(400).json({ message: "User ID is required" });
    }

    // logger.info(`–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id: ${userId}`);
    const profile = await getUserById(userId); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ 1–°
    console.log("profile", profile);

    res.json({
      firstname: profile.firstName,
      lastname: profile.lastName,
      email: profile.email,
      phone: profile.phone,
      date–°reate: profile.date–°reate,
    });
    // logger.info(`–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id: ${userId} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω`);
  } catch (error) {
    console.log("error", error.message);
    logger.error(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id: ${userId}. –û—à–∏–±–∫–∞: ${error.message}`
    );
    res.status(500).json({ message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

/**
 * @swagger
 * /api/cabinet/profile/newpassword:
 *   post:
 *     summary: –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å
 *     tags: ["üîí Profile"]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - password
 *             properties:
 *               password:
 *                 type: string
 *                 minLength: 10
 *                 example: S0m3Str0ngPa$$
 *     responses:
 *       200:
 *         description: –ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω
 *       400:
 *         description: –ü–∞—Ä–æ–ª—å –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
 *       401:
 *         description: JWT –Ω–µ–≤–∞–ª–∏–¥–µ–Ω
 *       500:
 *         description: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 */


router.post("/newpassword", async (req, res) => {
  const userId = req.userId;
  const password = req.body.password;
  if (!password) {
    logger.error("Password is not defined");
    return res.status(400).json({ message: "Password is required" });
  }
  if (!userId) {
    logger.error("User ID is not defined");
    return res.status(400).json({ message: "User ID is required" });
  }
  // logger.info(`–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id: ${userId}`);
  try {
    const updatedUser = await updateUser(userId, false, password);
    res.json(updateUser);
  } catch (error) {
    console.log("error", error.message);
    logger.error(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id: ${userId}. –û—à–∏–±–∫–∞: ${error.message}`
    );
    res.status(500).json({ message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

/**
 * @swagger
 * /api/cabinet/profile/newphone:
 *   post:
 *     summary: –û–±–Ω–æ–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 *     tags: ["üîí Profile"]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - phone
 *             properties:
 *               phone:
 *                 type: string
 *                 example: "+7 926 000-00-00"
 *     responses:
 *       200:
 *         description: –¢–µ–ª–µ—Ñ–æ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω
 *       400:
 *         description: –¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
 *       401:
 *         description: JWT –Ω–µ–≤–∞–ª–∏–¥–µ–Ω
 *       500:
 *         description: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 */

router.post("/newphone", async (req, res) => {
  const userId = req.userId;
  const phone = req.body.phone;
  if (!phone) {
    logger.error("Phone is not defined");
    return res.status(400).json({ message: "Phone is required" });
  }
  if (!userId) {
    logger.error("User ID is not defined");
    return res.status(400).json({ message: "User ID is required" });
  }
  // logger.info(`–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id: ${userId}`);
  try {
    const updatedUser = await updateUser(userId, phone, false);
    res.json(updatedUser);
  } catch (error) {
    console.log("error", error.message);
    logger.error(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id: ${userId}. –û—à–∏–±–∫–∞: ${error.message}`
    );
    res.status(500).json({ message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

/**
 * @swagger
 * /api/cabinet/profile/allusers:
 *   get:
 *     summary: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 *     description: >
 *       –°–µ—Ä–≤–∏—Å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç. –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º JWT.
 *     tags: ["üîí Profile"]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: –ú–∞—Å—Å–∏–≤ –ø—Ä–æ—Ñ–∏–ª–µ–π
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 type: object
 *                 properties:
 *                   id:
 *                     type: string
 *                     example: "8a6c‚Ä¶"
 *                   email:
 *                     type: string
 *                     example: user@example.com
 *                   phone:
 *                     type: string
 *                     example: "+7 900 123-45-67"
 *       401:
 *         description: –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω / –Ω–µ–≤–µ—Ä–Ω—ã–π JWT
 *       500:
 *         description: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 */

router.get("/allusers", async (req, res) => {
  try {
    const users = await getAllUsers();
    res.json(await getAllUsers());
  } catch (error) {
    console.log("error", error.message);
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error.message}`);
    res.status(500).json({ message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

module.exports = router;
