const express = require("express");
const router = express.Router();
const axios = require("axios");
const path = require("path");
const fs = require("fs");
require("dotenv").config();

const SERVER_1C = process.env.SERVER_1C;
const server1c_auth = process.env.SERVER_1C_AUTHORIZATION;
const pathFileStorage = process.env.PATH_FILESTORAGE;
const headers = {
  Authorization: server1c_auth,
};

/**
 * @swagger
 * /api/cabinet/get-file/by-id/{id}:
 *   get:
 *     summary: –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –∏–∑ 1–° –ø–æ GUID
 *     tags: ["üîí Files"]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: GUID –∑–∞–ø–∏—Å–∏ Catalog_profile–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ–§–∞–π–ª—ã
 *     responses:
 *       200:
 *         description: PDF-—Ñ–∞–π–ª
 *         content:
 *           application/pdf:
 *             schema:
 *               type: string
 *               format: binary
 *       403:
 *         description: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É
 *       404:
 *         description: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
 *       500:
 *         description: –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ 1–°
 */


// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–∑ 1–° –ø–æ ID
router.get("/by-id/:id", async function (req, res) {
  const userId = req.userId;
  const fileId = req.params.id;

  console.log(
    `–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ ID. userId: ${userId}, fileId: ${fileId}`
  );

  if (!userId) {
    console.error("userId –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω");
    return res.status(401).json({
      status: "error",
      message: "–Ω–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
    });
  }

  try {
    const connectionResponse = await axios.get(
      `${SERVER_1C}/InformationRegister_connectionsOfElements?$format=json&$filter=element1 eq cast(guid'${fileId}', 'Catalog_profile–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ–§–∞–π–ª—ã') and element2 eq cast(guid'${userId}', 'Catalog_profile') and usage eq true`,
      { headers }
    );

    const connections = connectionResponse.data.value;

    if (!connections || connections.length === 0) {
      return res.status(403).json({
        status: "error",
        message: "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ñ–∞–π–ª—É",
      });
    }

    const fileInfoResponse = await axios.get(
      `${SERVER_1C}/Catalog_profile–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ–§–∞–π–ª—ã(guid'${fileId}')?$format=json`,
      { headers }
    );

    const fileInfo = fileInfoResponse.data;

    const fileResponse = await axios.get(
      `${SERVER_1C}/Catalog_profile–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ–§–∞–π–ª—ã(guid'${fileId}')`,
      {
        headers,
        responseType: "arraybuffer",
      }
    );

    const fileData = fileResponse.data;
    const fileName = fileInfo.Description || "document.pdf";
    const contentType = "application/pdf";

    res.setHeader("Content-Type", contentType);
    res.setHeader(
      "Content-Disposition",
      `inline; filename="${encodeURIComponent(fileName)}"`
    );
    res.send(fileData);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∏–∑ 1–°: ${error.message}`);
    res.status(500).json({
      status: "error",
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞",
    });
  }
});

/**
 * @swagger
 * /api/cabinet/get-file/by-filename/{filename}:
 *   get:
 *     summary: –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –∏–∑ –≤—Ä–µ–º—ë–Ω dev-—Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ –∏–º–µ–Ω–∏
 *     tags: ["üîí Files"]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: filename
 *         required: true
 *         schema:
 *           type: string
 *         description: –ò–º—è —Ñ–∞–π–ª–∞ –≤–º–µ—Å—Ç–µ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
 *     responses:
 *       200:
 *         description: –§–∞–π–ª –Ω–∞–π–¥–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
 *       404:
 *         description: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
 *       500:
 *         description: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 */


// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ –∏–º–µ–Ω–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
router.get("/by-filename/:filename", async function (req, res) {
  const userId = req.userId;
  const filename = req.params.filename;

  console.log(
    `–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ ${filename} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`
  );

  try {
    const filePath = path.join(pathFileStorage, userId, filename);

    console.log(`–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: ${filePath}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
    if (fs.existsSync(filePath)) {
      res.download(filePath, filename, (err) => {
        if (err) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: ${err.message}`);
          res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞" });
        } else {
          console.log(`–§–∞–π–ª ${filename} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`);
        }
      });
    } else {
      console.error(`–§–∞–π–ª ${filePath} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      res.status(404).json({ message: "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${error.message}`);
    res.status(500).json({ message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

module.exports = router;

