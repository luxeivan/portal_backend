const express = require("express");
const router = express.Router();
const {
  getPersonalAccounts,
  getPersonalAccountItem,
  getClaimsByPersonalAccount,
} = require("../../services/onec/personalAccounts");
const logger = require("../../logger");

/**
 * @swagger
 * /api/cabinet/personalAccounts:
 *   get:
 *     summary: –°–ø–∏—Å–æ–∫ –ª–∏—Ü–µ–≤—ã—Ö —Å—á—ë—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 *     tags: ["üîí PersonalAccounts"]
 *     security: [ bearerAuth: [] ]
 *     responses:
 *       200:
 *         description: –õ–∏—Ü–µ–≤—ã–µ —Å—á—ë—Ç–∞ –Ω–∞–π–¥–µ–Ω—ã
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items: { type: object }
 *       500: { description: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö }
 */

router.get("/", async (req, res) => {
  const userId = req.userId;
  // logger.info(
  //   `–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–∏—á–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: ${userId}`
  // );

  try {
    const personalAccounts = await getPersonalAccounts(userId);
    // logger.info(`–ó–∞—è–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: ${userId}`);
    res.json(personalAccounts);
  } catch (error) {
    logger.error(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏—á–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${userId}: ${error.message}`
    );
    res.status(500).json({
      status: "error",
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏—á–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤",
      error: error.message,
    });
  }
});

/**
 * @swagger
 * /api/cabinet/personalAccounts/{key}:
 *   get:
 *     summary: –î–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á—ë—Ç–∞
 *     tags: ["üîí PersonalAccounts"]
 *     security: [ bearerAuth: [] ]
 *     parameters:
 *       - in: path
 *         name: key
 *         required: true
 *         schema: { type: string }
 *         description: GUID –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á—ë—Ç–∞
 *     responses:
 *       200: { description: –°—á—ë—Ç –Ω–∞–π–¥–µ–Ω }
 *       500: { description: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö }
 */

router.get("/:key", async (req, res) => {
  const userId = req.userId;
  const key = req.params.key;
  // logger.info(`–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å –∫–ª—é—á–æ–º: ${key}`);

  try {
    const personalAccount = await getPersonalAccountItem(userId, key);
    // logger.info(`–ó–∞—è–≤–∫–∞ —Å –∫–ª—é—á–æ–º ${key} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞`);
    res.json(personalAccount);
  } catch (error) {
    logger.error(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ —Å –∫–ª—é—á–æ–º ${key}: ${error.message}`
    );
    res.status(500).json({
      status: "error",
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏",
      error: error.message,
    });
  }

  /**
   * @swagger
   * /api/cabinet/personalAccounts/{key}/claims:
   *   get:
   *     summary: –ó–∞—è–≤–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ª–∏—Ü–µ–≤—ã–º —Å—á—ë—Ç–æ–º
   *     tags: ["üîí PersonalAccounts"]
   *     security: [ bearerAuth: [] ]
   *     parameters:
   *       - in: path
   *         name: key
   *         required: true
   *         schema: { type: string }
   *     responses:
   *       200:
   *         description: –ó–∞—è–≤–∫–∏ –Ω–∞–π–¥–µ–Ω—ã
   *         content:
   *           application/json:
   *             schema:
   *               type: array
   *               items: { type: object }
   *       500: { description: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö }
   */

  router.get("/:key/claims", async (req, res) => {
    const userId = req.userId;
    const key = req.params.key;
    // logger.info(
    //   `–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–∏—á–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: ${userId}`
    // );

    try {
      const —ÅlaimsByPersonalAccount = await getClaimsByPersonalAccount(
        userId,
        key
      );
      // logger.info(`–ó–∞—è–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: ${userId}`);
      res.json(—ÅlaimsByPersonalAccount);
    } catch (error) {
      logger.error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –ø–æ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É —Å ID ${userId}: ${error.message}`
      );
      res.status(500).json({
        status: "error",
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –ø–æ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É",
        error: error.message,
      });
    }
  });
});

module.exports = router;
