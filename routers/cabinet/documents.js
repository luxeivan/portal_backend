const express = require("express");
const jwt = require("jsonwebtoken");
const router = express.Router();
const axios = require("axios");
const path = require("path");
const fs = require("fs");
const { v4: uuidv4 } = require("uuid");
const moment = require("moment");

const logger = require("../../logger");
const { log } = require("console");

const pathFileStorage = process.env.PATH_FILESTORAGE;
const maxSizeFile = 10;

const documentsStore = {};

const SERVER_1C = process.env.SERVER_1C;
const SERVER_1C_HTTP_SERVICE = process.env.SERVER_1C_HTTP_SERVICE;
const server1c_auth = process.env.SERVER_1C_AUTHORIZATION;

// –ê–¥—Ä–µ—Å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ–º –æ–ø–æ–≤–µ—â–∞—Ç—å –±–æ—Ç–∞
// (–µ—Å–ª–∏ –±–æ—Ç –∏ –±—ç–∫–µ–Ω–¥ –Ω–∞ –æ–¥–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ, —É–∫–∞–∑—ã–≤–∞–π—Ç–µ http://127.0.0.1:3001/notifyError)
const botNotifyUrl =
  process.env.BOT_NOTIFY_URL || "http://127.0.0.1:3001/notifyError";

const headers = {
  Authorization: server1c_auth,
  "Content-Type": "application/json",
};

async function notifyBot(message, errorDetails = {}) {
  if (!botNotifyUrl) return;

  try {
    await axios.post(botNotifyUrl, {
      message,
      error: errorDetails,
    });
  } catch (notifyErr) {
    console.error("–ù–µ —Å–º–æ–≥–ª–∏ –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å –±–æ—Ç–∞:", notifyErr.message);
  }
}

/**
 * @swagger
 * /api/cabinet/documents/categories:
 *   get:
 *     summary: –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 *     tags: ["üîí Documents"]
 *     security: [ bearerAuth: [] ]
 *     responses:
 *       200:
 *         description: –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–π–¥–µ–Ω—ã
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 status:    { type: string, example: ok }
 *                 categories:
 *                   type: array
 *                   items:
 *                     type: object
 *                     properties:
 *                       Ref_Key:      { type: string }
 *                       Description:  { type: string }
 *                       maximumSize:  { type: integer }
 *       500: { description: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ 1–° }
 */

// –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ 1–°
router.get("/categories", async function (req, res) {
  try {
    // –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ 1–°
    const response = await axios.get(
      // `${SERVER_1C}/Catalog_services_categoriesFiles/?$format=json&$select=**&$filter=Ref_Key eq guid'6739b454-176f-11ef-94f0-5ef3fcb042f8'&$expand=category`,
      `${SERVER_1C}/Catalog_–í–∏–¥—ã–§–∞–π–ª–æ–≤?$format=json&$select=Description,label,Ref_Key,maximumSize&$filter=saveToProfile eq true`,
      { headers }
    );

    const categoriesData = response.data.value;
    // console.log("–ü–æ–ª—É—á–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ 1–°:", categoriesData); // –í—ã–≤–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

    res.json({
      status: "ok",
      categories: categoriesData,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ 1–°:", error);

    const errorDetails = {
      config: {
        url: error?.config?.url,
        method: error?.config?.method,
      },
      response: {
        status: error?.response?.status,
        statusText: error?.response?.statusText,
        data: error?.response?.data,
      },
      code: error?.code,
      message: error?.message,
    };

    // –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –±–æ—Ç–∞
    await notifyBot(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ 1–°: ${error.message}`,
      errorDetails
    );

    res.status(500).json({
      status: "error",
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
    });
  }
});

/**
 * @swagger
 * /api/cabinet/documents:
 *   post:
 *     summary: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
 *     tags: ["üîí Documents"]
 *     security: [ bearerAuth: [] ]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required: [documentName, files, category]
 *             properties:
 *               documentName: { type: string, example: –°–∫–∞–Ω –ø–∞—Å–ø–æ—Ä—Ç–∞ }
 *               category:     { type: string, example: 6739b454-176f-11ef-94f0-‚Ä¶ }
 *               files:
 *                 type: array
 *                 items:
 *                   type: object
 *                   properties:
 *                     name: { type: string, example: page1.jpg }
 *     responses:
 *       200: { description: –î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Å—Ç–µ–π—Ç–µ —Å–µ—Å—Å–∏–∏ }
 *       400: { description: –ù–µ—Ç –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π }
 *       500: { description: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ }
 */

router.post("/", async function (req, res) {
  try {
    const userId = req.userId;
    const { documentName, files, category } = req.body;

    if (!documentName || !files) {
      console.error(
        `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –≤ –∑–∞–ø—Ä–æ—Å–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id: ${userId}`
      );
      return res.status(400).json({
        status: "error",
        message: "–ù–µ—Ç –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π",
      });
    }

    // –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞
    const document = {
      id: uuidv4(), // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞
      documentName,
      category,
      files, // –ú–∞—Å—Å–∏–≤ —Ñ–∞–π–ª–æ–≤ { name }
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    if (!documentsStore[userId]) {
      documentsStore[userId] = [];
    }
    documentsStore[userId].push(document);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    res.json({
      status: "ok",
      message: "–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω",
      data: document,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:", error);
    res.status(500).json({
      status: "error",
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞",
    });
  }
});

/**
 * @swagger
 * /api/cabinet/documents:
 *   get:
 *     summary: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 *     tags: ["üîí Documents"]
 *     security: [ bearerAuth: [] ]
 *     responses:
 *       200:
 *         description: –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 status:    { type: string, example: ok }
 *                 documents: { type: array,  items: { type: object } }
 *       500: { description: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ 1–° }
 */

router.get("/", async function (req, res) {
  const userId = req.userId;

  try {
    //–¥–æ–±–∞–≤–∏—Ç—å + –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ —Ñ–∏–ª—å—Ç—Ä(–ö–∞—Ç–µ–≥–æ—Ä–∏–∏)
    // const requestUrl = `${SERVER_1C}/InformationRegister_connectionsOfElements/SliceLast(,Condition='element2 eq cast(guid'${userId}', 'Catalog_profile')')?$format=json&$expand=element1&$filter=usage eq true`;
    const requestUrl = `${SERVER_1C_HTTP_SERVICE}/profile/${userId}/docs`;
    // const requestUrl = `${SERVER_1C}/InformationRegister_connectionsOfElements?$format=json&$filter=element2 eq cast(guid'${userId}', 'Catalog_profile') and usage eq true and element1_Type eq 'StandardODATA.Catalog_profile–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ–§–∞–π–ª—ã'&$expand=element1`;

    const response = await axios.get(requestUrl, { headers });

    const connections = response.data;
    console.log(response.data);
    

    if (!connections || connections.length === 0) {
      return res.json({
        status: "ok",
        documents: [],
      });
    }

    // const documents = connections.map(
    //   (connection) => connection.element1_Expanded
    // );

    // return res.json({
    //   status: "ok",
    //   documents: documents,
    // });
    return res.json({
      status: "ok",
      ...response.data,
    });
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ 1–°: ${error.message}`);

    const errorDetails = {
      config: {
        url: error?.config?.url,
        method: error?.config?.method,
      },
      response: {
        status: error?.response?.status,
        statusText: error?.response?.statusText,
        data: error?.response?.data,
      },
      code: error?.code,
      message: error?.message,
    };

    // –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –±–æ—Ç–∞
    await notifyBot(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ 1–°: ${error.message}`,
      errorDetails
    );

    return res.status(500).json({
      status: "error",
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
    });
  }
});

/**
 * @swagger
 * /api/cabinet/documents/by-category:
 *   get:
 *     summary: –î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 *     tags: ["üîí Documents"]
 *     security: [ bearerAuth: [] ]
 *     parameters:
 *       - in: query
 *         name: categoryKey
 *         required: true
 *         schema: { type: string }
 *     responses:
 *       200: { description: –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã }
 *       500: { description: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ 1–° }
 */

router.get("/by-category", async function (req, res) {
  const userId = req.userId;
  const categoryKey = req.query.categoryKey;

  try {
    const requestUrl = `${SERVER_1C}/InformationRegister_connectionsOfElements/SliceLast(,Condition='element2 eq cast(guid'${userId}', 'Catalog_profile')')?$format=json&$expand=element1&$filter=usage eq true and element1/category_Key eq guid'${categoryKey}'`;

    // const requestUrl = `${SERVER_1C}/InformationRegister_connectionsOfElements?$format=json&$expand=element1&$filter=usage eq true and element2_Key eq guid'${userId}' and element1/VidFayla_Key eq guid'${categoryKey}'`;
    const response = await axios.get(requestUrl, { headers });
    const connections = response.data.value;

    if (!connections || connections.length === 0) {
      return res.json({ status: "ok", documents: [] });
    }

    const documents = connections.map(
      (connection) => connection.element1_Expanded
    );
    return res.json({ status: "ok", documents });
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ 1–°: ${error.message}`);

    const errorDetails = {
      config: {
        url: error?.config?.url,
        method: error?.config?.method,
      },
      response: {
        status: error?.response?.status,
        statusText: error?.response?.statusText,
        data: error?.response?.data,
      },
      code: error?.code,
      message: error?.message,
    };

    // –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –±–æ—Ç–∞
    await notifyBot(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏–∑ 1–°: ${error.message}`,
      errorDetails
    );

    return res
      .status(500)
      .json({ status: "error", message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤" });
  }
});

/**
 * @swagger
 * /api/cabinet/documents/getNameDocs:
 *   get:
 *     summary: –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ ¬´–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è¬ª
 *     tags: ["üîí Documents"]
 *     security: [ bearerAuth: [] ]
 *     responses:
 *       200:
 *         description: –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ–ª—É—á–µ–Ω
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 status:   { type: string, example: ok }
 *                 nameDocs: { type: array,  items: { type: object } }
 *       500: { description: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ 1–° }
 */

router.get("/getNameDocs", async function (req, res) {
  logger.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è");

  try {
    const response = await axios.get(
      `${server1C}/ChartOfCharacteristicTypes_–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–î–æ–∫—É–º–µ–Ω—Ç–æ–≤–ü—Ä–æ—Ñ–∏–ª—è?$format=json`
    );

    if (response.data) {
      // logger.info("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã");
      return res.json({
        status: "ok",
        nameDocs: response.data.value,
      });
    } else {
      logger.warn("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è");
      return res.status(404).json({
        status: "error",
        message: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è",
      });
    }
  } catch (error) {
    logger.error(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ 1–°. –û—à–∏–±–∫–∞: ${error.message}`
    );
    return res.status(500).json({
      status: "error",
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ 1–°",
    });
  }
});

/**
 * @swagger
 * /api/cabinet/documents/{id}:
 *   get:
 *     summary: –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
 *     tags: ["üîí Documents"]
 *     security: [ bearerAuth: [] ]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema: { type: string }
 *     responses:
 *       200: { description: –î–æ–∫—É–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω }
 *       400: { description: –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é }
 *       404: { description: –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω }
 *       500: { description: –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ 1–° }
 */

router.get("/:id", async function (req, res) {
  const userId = req.userId;
  const idDocument = req.params.id;

  // logger.info(`–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å id: ${idDocument}`);

  try {
    const response = await axios.get(
      `${server1C}/Catalog_DocumentsOfProfiles(guid'${idDocument}')?$format=json`
    );

    if (response.data) {
      if (response.data.profile === userId) {
        // logger.info(
        //   `–î–æ–∫—É–º–µ–Ω—Ç —Å id: ${idDocument} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`
        // );
        return res.json({
          status: "ok",
          document: response.data,
        });
      } else {
        logger.warn(
          `–î–æ–∫—É–º–µ–Ω—Ç —Å id: ${idDocument} –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${userId}`
        );
        return res.status(400).json({
          status: "error",
          message: "–ù–µ –≤–µ—Ä–Ω—ã–π id –¥–æ–∫—É–º–µ–Ω—Ç–∞",
        });
      }
    } else {
      logger.warn(`–î–æ–∫—É–º–µ–Ω—Ç —Å id: ${idDocument} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return res.status(404).json({
        status: "error",
        message: "–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
      });
    }
  } catch (error) {
    logger.error(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ 1–° –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å id: ${idDocument}. –û—à–∏–±–∫–∞: ${error.message}`
    );
    return res.status(500).json({
      status: "error",
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ 1–°",
    });
  }
});

/**
 * @swagger
 * /api/cabinet/documents/{id}:
 *   put:
 *     summary: –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
 *     tags: ["üîí Documents"]
 *     security: [ bearerAuth: [] ]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema: { type: string }
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               documentName: { type: string }
 *               files:
 *                 type: array
 *                 items: { type: object }
 *               nameDoc_Key:  { type: string }
 *     responses:
 *       200: { description: –î–æ–∫—É–º–µ–Ω—Ç –æ–±–Ω–æ–≤–ª—ë–Ω }
 *       400: { description: –ù–µ—Ç –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π –∏–ª–∏ —á—É–∂–æ–π –¥–æ–∫—É–º–µ–Ω—Ç }
 *       500: { description: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ 1–° }
 */

router.put("/:id", async function (req, res) {
  const userId = req.userId;
  const idDocument = req.params.id;
  const { documentName, files, nameDoc_Key } = req.body;

  // logger.info(
  //   `–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å id: ${idDocument} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`
  // );

  if (!documentName && !files) {
    logger.warn(
      `–ù–µ —É–∫–∞–∑–∞–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å id: ${idDocument}`
    );
    return res.status(400).json({
      status: "error",
      message: "–ù–µ—Ç –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π",
    });
  }

  const filesData = files.map((file, index) => ({
    LineNumber: index + 1,
    fileName: file.name,
    fileType: file.name.split(".").pop(),
    fileSize: "1000",
  }));

  const payload = {
    Description: documentName,
    profile: userId,
    files: filesData,
    nameDoc_Key,
  };

  try {
    const object = await getObjectItem(idDocument);
    if (object.attributes.profil.data.id !== userId) {
      logger.warn(
        `–î–æ–∫—É–º–µ–Ω—Ç —Å id: ${idDocument} –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${userId}`
      );
      return res.status(400).json({
        status: "error",
        message: "–ù–µ–≤–µ—Ä–Ω—ã–π id –æ–±—ä–µ–∫—Ç–∞",
      });
    }

    const response = await axios.patch(
      `${server1C}/Catalog_DocumentsOfProfiles(guid'${idDocument}')?$format=json`,
      payload,
      {
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
    if (response.data) {
      logger.info(
        `–î–æ–∫—É–º–µ–Ω—Ç —Å id: ${idDocument} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`
      );
      res.json({
        status: "ok",
        message: "–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω",
        data: response.data,
      });
    }
  } catch (error) {
    logger.error(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ 1–° –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å id: ${idDocument}. –û—à–∏–±–∫–∞: ${error.message}`
    );
    res.status(500).json({
      status: "error",
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ 1–°",
    });
  }
});

/**
 * @swagger
 * /api/cabinet/documents/{id}:
 *   delete:
 *     summary: –£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
 *     tags: ["üîí Documents"]
 *     security: [ bearerAuth: [] ]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema: { type: string }
 *     responses:
 *       200: { description: –î–æ–∫—É–º–µ–Ω—Ç —É–¥–∞–ª—ë–Ω }
 *       403: { description: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É }
 *       500: { description: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤ 1–° }
 */

router.delete("/:id", async function (req, res) {
  const userId = req.userId;
  const fileId = req.params.id;

  try {
    // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–≤—è–∑—å –∏–∑ 1–°
    const connectionResponse = await axios.get(
      `${SERVER_1C}/InformationRegister_connectionsOfElements/SliceLast(,Condition='element1 eq cast(guid'${fileId}', 'Catalog_profile–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ–§–∞–π–ª—ã') and element2 eq cast(guid'${userId}', 'Catalog_profile')')?$format=json&$filter=usage eq true`,
      { headers }
    );

    const connections = connectionResponse.data.value;

    if (!connections || connections.length === 0) {
      return res.status(403).json({
        status: "error",
        message: "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É",
      });
    }

    const connectionEntry = connections[0];

    // –®–∞–≥ 2: –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ —Ä–µ–≥–∏—Å—Ç—Ä —Å usage: false
    const newEntry = {
      Period: moment().format(),
      Recorder: null,
      usage: false,
      element1: connectionEntry.element1,
      element1_Type: connectionEntry.element1_Type,
      element2: connectionEntry.element2,
      element2_Type: connectionEntry.element2_Type,
      reason: "–£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    await axios.post(
      `${SERVER_1C}/InformationRegister_connectionsOfElements`,
      newEntry,
      { headers }
    );

    res.json({
      status: "ok",
      message: "–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
    });
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${error.message}`);
    if (error.response) {
      console.error("–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ 1–°:", error.response.data);
    }
    res.status(500).json({
      status: "error",
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞",
    });
  }
});

module.exports = router;
