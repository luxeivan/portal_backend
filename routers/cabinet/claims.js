const express = require("express");
const router = express.Router();
const {
  createClaim,
  createNewClaim,
  getClaims,
  getClaimItem,
  createNewClaim1,
} = require("../../services/onec/claims");
const logger = require("../../logger");

/**
 * @swagger
 * /api/cabinet/claims:
 *   post:
 *     summary: –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
 *     tags: ["üîí Claims"]
 *     security: [ bearerAuth: [] ]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             description: –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π JSON —Å –ø–æ–ª—è–º–∏ –∑–∞—è–≤–∫–∏
 *             example:
 *               serviceKey: "CONNECTION"
 *               description: "–•–æ—á—É –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ç–∏"
 *               files: [ "a1b2c3d4-e5f6-7890" ]
 *     responses:
 *       200:
 *         description: –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞
 *       500:
 *         description: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏
 */


router.post("/", async (req, res) => {
  const userId = req.userId;
  const data = req.body;
  logger.info(
    `–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: ${userId}`
  );

  try {
    const newClaim = await createNewClaim1(data, userId);
    logger.info(`–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: ${userId}`);
    res.json(newClaim);
  } catch (error) {
    // console.log(error);
    logger.error(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${userId}: ${error.message}`
    );
    res.status(500).json({
      status: "error",
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏",
      error: error,
    });
  }
});


/**
 * @swagger
 * /api/cabinet/claims:
 *   get:
 *     summary: –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 *     tags: ["üîí Claims"]
 *     security: [ bearerAuth: [] ]
 *     responses:
 *       200:
 *         description: –ú–∞—Å—Å–∏–≤ –∑–∞—è–≤–æ–∫
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items: { type: object }
 *       500:
 *         description: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫
 */

router.get("/", async (req, res) => {
  const userId = req.userId;
  // logger.info(
  //   `–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: ${userId}`
  // );

  try {
    const claims = await getClaims(userId);
    // logger.info(`–ó–∞—è–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: ${userId}`);
    res.json(claims);
  } catch (error) {
    logger.error(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${userId}: ${error.message}`
    );
    res.status(500).json({
      status: "error",
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫",
      error: error.message,
    });
  }
});

/**
 * @swagger
 * /api/cabinet/claims/{key}:
 *   get:
 *     summary: –î–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏
 *     tags: ["üîí Claims"]
 *     security: [ bearerAuth: [] ]
 *     parameters:
 *       - in: path
 *         name: key
 *         required: true
 *         schema: { type: string }
 *         description: GUID –∑–∞—è–≤–∫–∏
 *     responses:
 *       200: { description: –ó–∞—è–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ }
 *       500: { description: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ }
 */


router.get("/:key", async (req, res) => {
  const userId = req.userId;
  const key = req.params.key;
  // logger.info(`–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å –∫–ª—é—á–æ–º: ${key}`);

  try {
    const claim = await getClaimItem(userId, key);
    // logger.info(`–ó–∞—è–≤–∫–∞ —Å –∫–ª—é—á–æ–º ${key} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞`);
    res.json(claim);
  } catch (error) {
    logger.error(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ —Å –∫–ª—é—á–æ–º ${key}: ${error.message}`
    );
    res.status(500).json({
      status: "error",
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏",
      error: error.message,
    });
  }
});

module.exports = router;
