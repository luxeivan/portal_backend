const express = require("express");
const router = express.Router();
const {
  createClaim,
  createNewClaim,
  getClaims,
  getClaimItem,
  createNewClaim1,
} = require("../../services/onec/claims");
const logger = require("../../logger");

const { v4: uuidv4 } = require("uuid");
const os = require("os");

// ---------- helpers ----------
const getIp = (req) => {
  const xf = req.headers["x-forwarded-for"];
  if (xf) return xf.split(",")[0].trim();
  return req.socket?.remoteAddress || req.ip || null;
};

const buildCtx = (req, extra = {}) => ({
  requestId: extra.requestId || uuidv4(),
  ip: getIp(req),
  url: req.originalUrl,
  method: req.method,
  referer: req.get("referer") || null,
  userAgent: req.get("user-agent") || null,
  acceptLanguage: req.get("accept-language") || null,
  hostname: os.hostname(),
  extra,
});

const buildStack = (ctx, error) => {
  const { env, ...rest } = ctx || {};
  const ctxStr = `CTX=${JSON.stringify(rest)}`;
  return error?.stack ? `${error.stack}\n---\n${ctxStr}` : ctxStr;
};

const safeStringify = (obj) => {
  try { return JSON.stringify(obj); }
  catch {
    let cache = new Set();
    const res = JSON.stringify(obj, (k, v) => {
      if (typeof v === "object" && v !== null) {
        if (cache.has(v)) return "[Circular]";
        cache.add(v);
      }
      return v;
    });
    cache = null;
    return res;
  }
};

/**
 * @swagger
 * /api/cabinet/claims:
 *   post:
 *     summary: –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
 *     tags: ["üîí Claims"]
 *     security: [ bearerAuth: [] ]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             description: –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π JSON —Å –ø–æ–ª—è–º–∏ –∑–∞—è–≤–∫–∏
 *             example:
 *               serviceKey: "CONNECTION"
 *               description: "–•–æ—á—É –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ç–∏"
 *               files: [ "a1b2c3d4-e5f6-7890" ]
 *     responses:
 *       200:
 *         description: –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞
 *       500:
 *         description: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏
 */


router.post("/", async (req, res) => {
  const userId = req.userId;
  const data = req.body || {};
  const requestId = uuidv4();
  const ctx = buildCtx(req, { scope: "claims.create", requestId, userId });

  logger.info(
    `[Claims] –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}. –î–∞–Ω–Ω—ã–µ: ${safeStringify(data)}`,
    { stack: buildStack(ctx) }
  );

  try {
    const newClaim = await createNewClaim1(data, userId);

    const claimData = newClaim?.data?.data || {};
    const createdKey = claimData.Ref_key || claimData.Ref_Key || null;
    const createdNumber = claimData.number || claimData.Number || null;

    logger.info(
      `[Claims] –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}. ` +
      (createdNumber ? `–ù–æ–º–µ—Ä: ${createdNumber}. ` : "") +
      (createdKey ? `–ö–ª—é—á: ${createdKey}. ` : "") +
      `–ó–∞—è–≤–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: ${safeStringify(data)}`,
      { stack: buildStack({ ...ctx, createdKey, createdNumber }) }
    );

    res.json(newClaim);
  } catch (error) {
    logger.error(
      `[Claims] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${error.message}`,
      { stack: buildStack(ctx, error) }
    );
    res.status(500).json({
      status: "error",
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏",
      error: error.message,
    });
  }
});


/**
 * @swagger
 * /api/cabinet/claims:
 *   get:
 *     summary: –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 *     tags: ["üîí Claims"]
 *     security: [ bearerAuth: [] ]
 *     responses:
 *       200:
 *         description: –ú–∞—Å—Å–∏–≤ –∑–∞—è–≤–æ–∫
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items: { type: object }
 *       500:
 *         description: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫
 */

router.get("/", async (req, res) => {
  const userId = req.userId;
  const requestId = uuidv4();
  const ctx = buildCtx(req, { scope: "claims.list", requestId, userId });

  try {
    const claims = await getClaims(userId);
    logger.info(
      `[Claims] –ó–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã`,
      { stack: buildStack({ ...ctx, count: Array.isArray(claims) ? claims.length : null }) }
    );
    res.json(claims);
  } catch (error) {
    logger.error(
      `[Claims] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${error.message}`,
      { stack: buildStack(ctx, error) }
    );
    res.status(500).json({
      status: "error",
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫",
      error: error.message,
    });
  }
});

/**
 * @swagger
 * /api/cabinet/claims/{key}:
 *   get:
 *     summary: –î–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏
 *     tags: ["üîí Claims"]
 *     security: [ bearerAuth: [] ]
 *     parameters:
 *       - in: path
 *         name: key
 *         required: true
 *         schema: { type: string }
 *         description: GUID –∑–∞—è–≤–∫–∏
 *     responses:
 *       200: { description: –ó–∞—è–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ }
 *       500: { description: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ }
 */


router.get("/:key", async (req, res) => {
  const userId = req.userId;
  const key = req.params.key;
  const requestId = uuidv4();
  const ctx = buildCtx(req, { scope: "claims.item", requestId, userId, key });

  try {
    const claim = await getClaimItem(userId, key);
    logger.info(
      `[Claims] –ó–∞—è–≤–∫–∞ ${key} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`,
      { stack: buildStack(ctx) }
    );
    res.json(claim);
  } catch (error) {
    logger.error(
      `[Claims] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ —Å –∫–ª—é—á–æ–º ${key}: ${error.message}`,
      { stack: buildStack(ctx, error) }
    );
    res.status(500).json({
      status: "error",
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏",
      error: error.message,
    });
  }
});

module.exports = router;
