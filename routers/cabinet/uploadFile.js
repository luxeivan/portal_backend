const express = require("express");
const router = express.Router();
const fs = require("fs");
const { v4: uuidv4 } = require("uuid");
const logger = require("../../logger");
const { PDFDocument } = require("pdf-lib");
const axios = require("axios");
const moment = require("moment");
require("dotenv").config();

const SERVER_1C = process.env.SERVER_1C;
const SERVER_1C_HTTP_SERVICE = process.env.SERVER_1C_HTTP_SERVICE;
const server1c_auth = process.env.SERVER_1C_AUTHORIZATION;
const headers = {
  Authorization: server1c_auth,
  "Content-Type": "application/json",
};

const pathFileStorage =
  process.env.PATH_FILESTORAGE ||
  "/Users/yanutstas/Desktop/Project/portal_backend/files";

/**
 * @swagger
 * /api/cabinet/upload-file:
 *   post:
 *     summary: –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫ –ø—Ä–æ—Ñ–∏–ª—é
 *     description: >
 *       üîí –¢—Ä–µ–±—É–µ—Ç—Å—è JWT.
 *       –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPEG/PNG) –∏ PDF, –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∏—Ö
 *       –≤ –æ–¥–∏–Ω PDF –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ 1–°.
 *     tags: ["üîí Files"]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         multipart/form-data:
 *           schema:
 *             type: object
 *             required: [files, categoryKey, documentName]
 *             properties:
 *               files:
 *                 type: array
 *                 items:
 *                   type: string
 *                   format: binary
 *               categoryKey:
 *                 type: string
 *                 description: GUID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ 1–°
 *               documentName:
 *                 type: string
 *                 description: –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
 *     responses:
 *       200:
 *         description: –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω
 *       400:
 *         description: –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ / –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
 *       401:
 *         description: JWT –Ω–µ–≤–∞–ª–∏–¥–µ–Ω
 *       500:
 *         description: –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ 1–°
 */

router.post("/", async function (req, res) {
  const uuid = uuidv4();
  const userId = req.userId;
  const dirName = `${pathFileStorage}/${userId}`;

  console.log("–ü–æ–ª–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:", dirName);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±–º–µ–Ω–∞ –∏–∑ 1–°
  let user_Key, mainVolume_Key;
  // try {
  //   const exchangeSettingsResponse = await axios.get(
  //     `${SERVER_1C}/InformationRegister_exchangeSettings/SliceLast()?$format=json`,
  //     { headers }
  //   );
  //   const exchangeSettings = exchangeSettingsResponse.data.value[0];
  //   console.log("–ü–æ–ª—É—á–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–º–µ–Ω–∞ –∏–∑ 1–°:", exchangeSettings);
  //   user_Key = exchangeSettings.user_Key;
  //   mainVolume_Key = exchangeSettings.mainVolume_Key;
  //   console.log("user_Key:", user_Key);
  //   console.log("mainVolume_Key:", mainVolume_Key);
  // } catch (error) {
  //   console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±–º–µ–Ω–∞ –∏–∑ 1–°:", error);
  //   return res.status(500).json({
  //     status: "error",
  //     message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±–º–µ–Ω–∞",
  //   });
  // }

  if (!req.files || Object.keys(req.files).length === 0) {
    logger.warn(`–ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–∞–π–ª–æ–≤. UUID: ${uuid}`);
    return res.status(400).json({
      status: "error",
      message: "–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏",
    });
  }

  const files = Array.isArray(req.files.files)
    ? req.files.files
    : [req.files.files];

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑ 1–°
  let allowedExtensions = ["JPEG", "JPG", "PDF", "PNG"];
  let maxSizeFile = 10 * 1024 * 1024; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 –ú–ë
  const { categoryKey, saveToProfile } = req.body;
   console.log("–ü–æ–ª—É—á–µ–Ω–Ω—ã–π saveToProfile:", saveToProfile);
  //  console.log("–ü–æ–ª—É—á–µ–Ω–Ω—ã–π categoryKey:", categoryKey);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤
  let invalidFile = false;
  for (const file of files) {
    const fileExtension = file.name.split(".").pop().toUpperCase();
    if (!allowedExtensions.includes(fileExtension)) {
      invalidFile = "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞";
      break;
    }
    if (file.size > maxSizeFile) {
      invalidFile = "–ü—Ä–µ–≤—ã—à–µ–Ω —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞";
      break;
    }
  }

  if (invalidFile) {
    logger.warn(
      `–û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º. UUID: ${uuid}`
    );
    return res.status(400).json({
      status: "error",
      // message: "–§–∞–π–ª—ã –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø–æ —Ä–∞–∑–º–µ—Ä—É –∏–ª–∏ —Ç–∏–ø—É",
      message: `${invalidFile}`
    });
  }

  try {
    // –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    await fs.promises.mkdir(dirName, { recursive: true });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    for (const file of files) {
      const filePath = `${dirName}/${file.name}`;
      console.log("–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø–æ –ø—É—Ç–∏:", filePath);
      await file.mv(filePath);
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π PDF-–¥–æ–∫—É–º–µ–Ω—Ç
    const pdfDoc = await PDFDocument.create();

    for (const file of files) {
      const filePath = `${dirName}/${file.name}`;
      const fileBuffer = await fs.promises.readFile(filePath);
      console.log("–§–∞–π–ª –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω —Å –ø—É—Ç–∏:", filePath);

      let pdfImage;
      if (file.mimetype === "image/jpeg" || file.mimetype === "image/jpg") {
        pdfImage = await pdfDoc.embedJpg(fileBuffer);
        const page = pdfDoc.addPage([pdfImage.width, pdfImage.height]);
        page.drawImage(pdfImage, {
          x: 0,
          y: 0,
          width: pdfImage.width,
          height: pdfImage.height,
        });
      } else if (file.mimetype === "image/png") {
        pdfImage = await pdfDoc.embedPng(fileBuffer);
        const page = pdfDoc.addPage([pdfImage.width, pdfImage.height]);
        page.drawImage(pdfImage, {
          x: 0,
          y: 0,
          width: pdfImage.width,
          height: pdfImage.height,
        });
      } else if (file.mimetype === "application/pdf") {
        const donorPdfDoc = await PDFDocument.load(fileBuffer);
        const donorPages = await pdfDoc.copyPages(
          donorPdfDoc,
          donorPdfDoc.getPageIndices()
        );
        donorPages.forEach((page) => pdfDoc.addPage(page));
      } else {
        continue;
      }
    }

    // const pdfBytes = await pdfDoc.save();
    const pdfAsBase64 = await pdfDoc.saveAsBase64();
    // const pdfFilename = `combined_document_${uuid}.pdf`;
    // const pdfPath = `${dirName}/${pdfFilename}`;

    // console.log("–°–æ–∑–¥–∞–Ω–Ω—ã–π PDF —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø–æ –ø—É—Ç–∏:", pdfPath);


    const resSaveFile = await axios.post(`${SERVER_1C_HTTP_SERVICE}/profile/${userId}/file`, {
      base64: pdfAsBase64,
      ext: "pdf"
    }, { headers })
    // console.log("res", res.data)


    // await fs.promises.writeFile(pdfPath, pdfBytes);
    // logger.info(
    //   `–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π PDF —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: ${pdfFilename}. UUID: ${uuid}`
    // );

    // –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
    try {
      for (const file of files) {
        const filePath = `${dirName}/${file.name}`;
        await fs.promises.unlink(filePath);
      }
    } catch (err) {
      logger.error(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã. –û—à–∏–±–∫–∞: ${err.message}`);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –≤ 1–°
    // let fileRefKey;
    try {
      // const fileData = fs.readFileSync(pdfPath);
      // const base64File = fileData.toString("base64");

      // const currentDate = new Date();
      // const filePathIn1C = `${userId}/${pdfFilename}`;

      // console.log("–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ 1–° –ø–æ –ø—É—Ç–∏:", filePathIn1C);

      if (saveToProfile) {
        const resSaveDocsProfile = await axios.post(`${SERVER_1C_HTTP_SERVICE}/profile/${userId}/docs`, {
          fileId: resSaveFile?.data?.data?.fileId,
          name: req.body.documentName,
          typeFileId: categoryKey
        }, { headers })
        console.log("resSaveDocsProfile", resSaveDocsProfile.data)
      } else {
        return res.json({ status: "ok", message: "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω", fileId: resSaveFile?.data?.data?.fileId });
      }

      // const payload = {
      //   Description: req.body.documentName,
      //   –í–ª–∞–¥–µ–ª–µ—Ü–§–∞–π–ª–∞_Key: userId,
      //   –ê–≤—Ç–æ—Ä_Key: user_Key,
      //   –î–∞—Ç–∞–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è: currentDate.toISOString(),
      //   –î–∞—Ç–∞–°–æ–∑–¥–∞–Ω–∏—è: currentDate.toISOString(),
      //   –ü—É—Ç—å–ö–§–∞–π–ª—É: filePathIn1C,
      //   –†–∞–∑–º–µ—Ä: fileData.length.toString(),
      //   –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ: "pdf",
      //   –¢–∏–ø–•—Ä–∞–Ω–µ–Ω–∏—è–§–∞–π–ª–∞: "–í–¢–æ–º–∞—Ö–ù–∞–î–∏—Å–∫–µ",
      //   –¢–æ–º_Key: mainVolume_Key,
      //   –í–∏–¥–§–∞–π–ª–∞_Key: categoryKey,
      // };


      //   const uploadResponse = await axios.post(
      //     `${SERVER_1C}/Catalog_profile–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ–§–∞–π–ª—ã?$format=json`,
      //     payload,
      //     { headers }
      //   );
      //   console.log("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ 1–°:", uploadResponse.data);
      //   fileRefKey = uploadResponse.data.Ref_Key; // –ü–æ–ª—É—á–∞–µ–º Ref_Key –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞

    } catch (error) {
      console.error(
        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –≤ 1–°:",
        error.response ? error.response.data : error.message
      );
      return res.status(500).json({
        status: "error",
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –≤ 1–°",
      });
    }
    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∏ –≤ InformationRegister_connectionsOfElements
    // try {
    //   const connectionPayload = {
    //     Period: moment().format(),
    //     usage: true,
    //     element1: fileRefKey,
    //     element1_Type: "StandardODATA.Catalog_profile–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ–§–∞–π–ª—ã",
    //     element2: userId,
    //     element2_Type: "StandardODATA.Catalog_profile",
    //     reason: "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    //   };

    //   const connectionResponse = await axios.post(
    //     `${SERVER_1C}/InformationRegister_connectionsOfElements?$format=json`,
    //     connectionPayload,
    //     { headers }
    //   );
    //   console.log(
    //     "–°–≤—è–∑—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ InformationRegister_connectionsOfElements:",
    //     connectionResponse.data
    //   );
    // } catch (error) {
    //   console.error(
    //     "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤—è–∑–∏ –≤ InformationRegister_connectionsOfElements:",
    //     error.response ? error.response.data : error.message
    //   );
    //   return res.status(500).json({
    //     status: "error",
    //     message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤—è–∑–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º",
    //   });
    // }

    return res.json({ status: "ok", message: "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω" });
  } catch (error) {
    console.log("error", error)
    logger.error(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤. UUID: ${uuid}. –û—à–∏–±–∫–∞: ${error.message}`
    );
    return res.status(500).json({
      status: "error",
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤",
    });
  }
});

module.exports = router;

// const express = require("express");
// const router = express.Router();
// const fs = require("fs");
// const { v4: uuidv4 } = require("uuid");
// const logger = require("../../logger");
// const { PDFDocument } = require("pdf-lib");
// const axios = require("axios");
// require("dotenv").config();

// const SERVER_1C = process.env.SERVER_1C;
// const server1c_auth = process.env.SERVER_1C_AUTHORIZATION;
// const headers = {
//   Authorization: server1c_auth,
//   "Content-Type": "application/json",
// };

// const pathFileStorage =
//   process.env.PATH_FILESTORAGE ||
//   "/Users/yanutstas/Desktop/Project/portal_backend/files";

// router.post("/", async function (req, res) {
//   const uuid = uuidv4();
//   const userId = req.userId;
//   const dirName = `${pathFileStorage}/${userId}`;

//   console.log("–ü–æ–ª–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:", dirName); // –õ–æ–≥–∏—Ä—É–µ–º –ø—É—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ

//   // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±–º–µ–Ω–∞ –∏–∑ 1–°
//   let user_Key, mainVolume_Key;
//   try {
//     const exchangeSettingsResponse = await axios.get(
//       `${SERVER_1C}/InformationRegister_exchangeSettings/SliceLast()?$format=json`,
//       { headers }
//     );
//     const exchangeSettings = exchangeSettingsResponse.data.value[0];
//     console.log("–ü–æ–ª—É—á–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–º–µ–Ω–∞ –∏–∑ 1–°:", exchangeSettings);
//     user_Key = exchangeSettings.user_Key;
//     mainVolume_Key = exchangeSettings.mainVolume_Key;
//     console.log("user_Key:", user_Key);
//     console.log("mainVolume_Key:", mainVolume_Key);
//   } catch (error) {
//     console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±–º–µ–Ω–∞ –∏–∑ 1–°:", error);
//     return res.status(500).json({
//       status: "error",
//       message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±–º–µ–Ω–∞",
//     });
//   }

//   if (!req.files || Object.keys(req.files).length === 0) {
//     logger.warn(`–ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–∞–π–ª–æ–≤. UUID: ${uuid}`);
//     return res.status(400).json({
//       status: "error",
//       message: "–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏",
//     });
//   }

//   const files = Array.isArray(req.files.files)
//     ? req.files.files
//     : [req.files.files];

//   // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑ 1–°
//   let allowedExtensions = [];
//   let maxSizeFile = 10 * 1024 * 1024; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 –ú–ë
//   const { categoryKey } = req.body; // –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
//   console.log("–ü–æ–ª—É—á–µ–Ω–Ω—ã–π categoryKey:", categoryKey); // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π categoryKey

//   try {
//     const requestUrl = `${SERVER_1C}/Catalog_services_categoriesFiles?$format=json&$filter=category_Key eq guid'${categoryKey}'&$expand=category`;
//     console.log("–ó–∞–ø—Ä–æ—Å –∫ 1–°:", requestUrl); // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
//     const response = await axios.get(requestUrl, { headers });
//     console.log("–û—Ç–≤–µ—Ç –æ—Ç 1–°:", response.data); // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç 1–°

//     if (response.data.value && response.data.value.length > 0) {
//       const categoryData = response.data.value[0].category;
//       allowedExtensions = JSON.parse(categoryData.availableExtensionsJSON);
//       maxSizeFile = parseInt(categoryData.maximumSize) * 1024 * 1024;
//       console.log("–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏–∑ 1–°:", allowedExtensions);
//       console.log("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏–∑ 1–°:", maxSizeFile);
//     } else {
//       console.error("–î–∞–Ω–Ω—ã–µ –∏–∑ 1–° –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ categoryKey.");
//       return res.status(400).json({
//         status: "error",
//         message: "–ù–µ–≤–µ—Ä–Ω—ã–π categoryKey –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
//       });
//     }
//   } catch (error) {
//     console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ 1–°:", error);
//     return res.status(500).json({
//       status: "error",
//       message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
//     });
//   }

//   // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤
//   let invalidFile = false;
//   for (const file of files) {
//     const fileExtension = file.name.split(".").pop().toUpperCase();
//     if (!allowedExtensions.includes(fileExtension)) {
//       invalidFile = true;
//       break;
//     }
//     if (file.size > maxSizeFile) {
//       invalidFile = true;
//       break;
//     }
//   }

//   if (invalidFile) {
//     logger.warn(
//       `–û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º. UUID: ${uuid}`
//     );
//     return res.status(400).json({
//       status: "error",
//       message: "–§–∞–π–ª—ã –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø–æ —Ä–∞–∑–º–µ—Ä—É –∏–ª–∏ —Ç–∏–ø—É",
//     });
//   }

//   try {
//     // –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
//     await fs.promises.mkdir(dirName, { recursive: true });

//     // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
//     for (const file of files) {
//       const filePath = `${dirName}/${file.name}`;
//       console.log("–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø–æ –ø—É—Ç–∏:", filePath); // –õ–æ–≥–∏—Ä—É–µ–º –ø—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
//       await file.mv(filePath);
//     }

//     // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π PDF-–¥–æ–∫—É–º–µ–Ω—Ç
//     const pdfDoc = await PDFDocument.create();

//     for (const file of files) {
//       const filePath = `${dirName}/${file.name}`;
//       const fileBuffer = await fs.promises.readFile(filePath);
//       console.log("–§–∞–π–ª –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω —Å –ø—É—Ç–∏:", filePath); // –õ–æ–≥–∏—Ä—É–µ–º –ø—É—Ç—å –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞

//       let pdfImage;
//       if (file.mimetype === "image/jpeg" || file.mimetype === "image/jpg") {
//         pdfImage = await pdfDoc.embedJpg(fileBuffer);
//         const page = pdfDoc.addPage([pdfImage.width, pdfImage.height]);
//         page.drawImage(pdfImage, {
//           x: 0,
//           y: 0,
//           width: pdfImage.width,
//           height: pdfImage.height,
//         });
//       } else if (file.mimetype === "image/png") {
//         pdfImage = await pdfDoc.embedPng(fileBuffer);
//         const page = pdfDoc.addPage([pdfImage.width, pdfImage.height]);
//         page.drawImage(pdfImage, {
//           x: 0,
//           y: 0,
//           width: pdfImage.width,
//           height: pdfImage.height,
//         });
//       } else if (file.mimetype === "application/pdf") {
//         const donorPdfDoc = await PDFDocument.load(fileBuffer);
//         const donorPages = await pdfDoc.copyPages(
//           donorPdfDoc,
//           donorPdfDoc.getPageIndices()
//         );
//         donorPages.forEach((page) => pdfDoc.addPage(page));
//       } else {
//         continue;
//       }
//     }

//     const pdfBytes = await pdfDoc.save();
//     const pdfFilename = `combined_document_${uuid}.pdf`;
//     const pdfPath = `${dirName}/${pdfFilename}`;

//     console.log("–°–æ–∑–¥–∞–Ω–Ω—ã–π PDF —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø–æ –ø—É—Ç–∏:", pdfPath); // –õ–æ–≥–∏—Ä—É–µ–º –ø—É—Ç—å —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ PDF

//     await fs.promises.writeFile(pdfPath, pdfBytes);
//     logger.info(
//       `–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π PDF —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: ${pdfFilename}. UUID: ${uuid}`
//     );

//     // –£–¥–∞–ª—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π PDF –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
//     try {
//       for (const file of files) {
//         const filePath = `${dirName}/${file.name}`;
//         // console.log("–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø–æ –ø—É—Ç–∏:", filePath); // –õ–æ–≥–∏—Ä—É–µ–º –ø—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
//         await fs.promises.unlink(filePath);
//       }
//     } catch (err) {
//       logger.error(
//         `–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã. –û—à–∏–±–∫–∞: ${err.message}`
//       );
//     }
//     // try {
//     //   await fs.promises.unlink(pdfPath);
//     // } catch (err) {
//     //   logger.error(
//     //     `–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π PDF: ${pdfPath}. –û—à–∏–±–∫–∞: ${err.message}`
//     //   );
//     // }

//     // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –≤ 1–°
//     try {
//       const fileData = fs.readFileSync(pdfPath);
//       const base64File = fileData.toString("base64");

//       const currentDate = new Date();
//       const formattedDate = currentDate
//         .toISOString()
//         .slice(0, 10)
//         .replace(/-/g, "");
//       const filePathIn1C = `${userId}/${pdfFilename}`; // –∑–∞–º–µ–Ω–∏–ª '\' –Ω–∞ '/' –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Ç–∏

//       console.log("–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ 1–° –ø–æ –ø—É—Ç–∏:", filePathIn1C); // –õ–æ–≥–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ 1–°

//       const payload = {
//         Description: req.body.documentName,
//         –í–ª–∞–¥–µ–ª–µ—Ü–§–∞–π–ª–∞_Key: userId,
//         –ê–≤—Ç–æ—Ä_Key: user_Key,
//         –î–∞—Ç–∞–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è: currentDate.toISOString(),
//         –î–∞—Ç–∞–°–æ–∑–¥–∞–Ω–∏—è: currentDate.toISOString(),
//         –ü—É—Ç—å–ö–§–∞–π–ª—É: filePathIn1C,
//         –†–∞–∑–º–µ—Ä: fileData.length.toString(),
//         –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ: "pdf",
//         –¢–∏–ø–•—Ä–∞–Ω–µ–Ω–∏—è–§–∞–π–ª–∞: "–í–¢–æ–º–∞—Ö–ù–∞–î–∏—Å–∫–µ",
//         –¢–æ–º_Key: mainVolume_Key,
//         –í–∏–¥–§–∞–π–ª–∞_Key: categoryKey,
//         // –§–∞–π–ª–•—Ä–∞–Ω–∏–ª–∏—â–µ_Type: "application/octet-stream",
//         // –§–∞–π–ª–•—Ä–∞–Ω–∏–ª–∏—â–µ_Base64Data: base64File,
//       };

//       const uploadResponse = await axios.post(
//         `${SERVER_1C}/Catalog_profile–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ–§–∞–π–ª—ã?$format=json`,
//         payload,
//         { headers }
//       );
//       //–≤—ã–¥–µ—Ä–Ω—É—Ç—å uploadResponse.data(refkey)
//       console.log("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ 1–°:", uploadResponse.data); // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
//     } catch (error) {
//       console.error(
//         "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –≤ 1–°:",
//         error.response ? error.response.data : error.message
//       );
//       return res.status(500).json({
//         status: "error",
//         message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –≤ 1–°",
//       });
//     }

//     return res.json({ status: "ok", message: "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω" });
//   } catch (error) {
//     logger.error(
//       `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤. UUID: ${uuid}. –û—à–∏–±–∫–∞: ${error.message}`
//     );
//     return res.status(500).json({
//       status: "error",
//       message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤",
//     });
//   }
// });

// module.exports = router;
